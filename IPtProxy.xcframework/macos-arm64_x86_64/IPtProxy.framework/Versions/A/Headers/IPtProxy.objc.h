// Objective-C API for talking to github.com/tladesignz/IPtProxy.git Go package.
//   gobind -lang=objc github.com/tladesignz/IPtProxy.git
//
// File is generated by gobind. Do not edit.

#ifndef __IPtProxy_H__
#define __IPtProxy_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class IPtProxyController;
@class IPtProxySnowflakeProxy;
@protocol IPtProxyOnTransportStopped;
@class IPtProxyOnTransportStopped;
@protocol IPtProxySnowflakeClientConnected;
@class IPtProxySnowflakeClientConnected;

@protocol IPtProxyOnTransportStopped <NSObject>
- (void)stopped:(NSString* _Nullable)name error:(NSError* _Nullable)error;
@end

@protocol IPtProxySnowflakeClientConnected <NSObject>
/**
 * Connected - callback method to handle snowflake proxy client connections.
 */
- (void)connected;
@end

/**
 * Controller - Class to start and stop transports.
 */
@interface IPtProxyController : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewController - Create a new Controller object.

@param enableLogging Log to StateDir/ipt.log.

@param unsafeLogging Disable the address scrubber.

@param logLevel Log level (ERROR/WARN/INFO/DEBUG). Defaults to ERROR if empty string.

@param transportStopped A delegate, which is called, when the started transport stopped again.
Will be called on its own thread! You will need to switch to your own UI thread,
if you want to do UI stuff!
 */
- (nullable instancetype)init:(NSString* _Nullable)stateDir enableLogging:(BOOL)enableLogging unsafeLogging:(BOOL)unsafeLogging logLevel:(NSString* _Nullable)logLevel transportStopped:(id<IPtProxyOnTransportStopped> _Nullable)transportStopped;
/**
 * SnowflakeIceServers is a comma-separated list of ICE server addresses.
 */
@property (nonatomic) NSString* _Nonnull snowflakeIceServers;
/**
 * SnowflakeBrokerUrl - URL of signaling broker.
 */
@property (nonatomic) NSString* _Nonnull snowflakeBrokerUrl;
/**
 * SnowflakeFrontDomains is a comma-separated list of domains for either
the domain fronting or AMP cache rendezvous methods.
 */
@property (nonatomic) NSString* _Nonnull snowflakeFrontDomains;
/**
 * SnowflakeAmpCacheUrl - URL of AMP cache to use as a proxy for signaling.
Only needed when you want to do the rendezvous over AMP instead of a domain fronted server.
 */
@property (nonatomic) NSString* _Nonnull snowflakeAmpCacheUrl;
/**
 * SnowflakeSqsUrl - URL of SQS Queue to use as a proxy for signaling.
 */
@property (nonatomic) NSString* _Nonnull snowflakeSqsUrl;
/**
 * SnowflakeSqsCreds - Credentials to access SQS Queue.
 */
@property (nonatomic) NSString* _Nonnull snowflakeSqsCreds;
/**
 * SnowflakeMaxPeers - Capacity for number of multiplexed WebRTC peers. DEFAULTs to 1 if less than that.
 */
@property (nonatomic) long snowflakeMaxPeers;
/**
 * LocalAddress - Address of the given transport.

@param methodName one of the constants `ScrambleSuit` (deprecated), `Obfs2` (deprecated), `Obfs3` (deprecated),
`Obfs4`, `MeekLite`, `Webtunnel` or `Snowflake`.

@return address string containing host and port where the given transport listens.
 */
- (NSString* _Nonnull)localAddress:(NSString* _Nullable)methodName;
/**
 * Port - Port of the given transport.

@param methodName one of the constants `ScrambleSuit` (deprecated), `Obfs2` (deprecated), `Obfs3` (deprecated),
`Obfs4`, `MeekLite`, `Webtunnel` or `Snowflake`.

@return port number on localhost where the given transport listens.
 */
- (long)port:(NSString* _Nullable)methodName;
/**
 * Start - Start given transport.

@param methodName one of the constants `ScrambleSuit` (deprecated), `Obfs2` (deprecated), `Obfs3` (deprecated),
`Obfs4`, `MeekLite`, `Webtunnel` or `Snowflake`.

@param proxy HTTP, SOCKS4 or SOCKS5 proxy to be used behind Lyrebird. E.g. "socks5://127.0.0.1:12345"

@throws if the proxy URL cannot be parsed, if the given `methodName` cannot be found, if the transport cannot
be initialized or if it couldn't bind a port for listening.
 */
- (BOOL)start:(NSString* _Nullable)methodName proxy:(NSString* _Nullable)proxy error:(NSError* _Nullable* _Nullable)error;
/**
 * StateDir - The StateDir set in the constructor.

@returns the directory you set in the constructor, where transports store their state and where the log file resides.
 */
- (NSString* _Nonnull)stateDir;
/**
 * Stop - Stop given transport.

@param methodName one of the constants `ScrambleSuit` (deprecated), `Obfs2` (deprecated), `Obfs3` (deprecated),
`Obfs4`, `MeekLite`, `Webtunnel` or `Snowflake`.
 */
- (void)stop:(NSString* _Nullable)methodName;
@end

/**
 * SnowflakeProxy - Class to start and stop a Snowflake proxy.
 */
@interface IPtProxySnowflakeProxy : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Capacity - the maximum number of clients a Snowflake will serve. If set to 0, the proxy will accept an unlimited number of clients.
 */
@property (nonatomic) long capacity;
/**
 * BrokerUrl - Defaults to https://snowflake-broker.torproject.net/, if empty.
 */
@property (nonatomic) NSString* _Nonnull brokerUrl;
/**
 * RelayUrl - WebSocket relay URL. Defaults to wss://snowflake.bamsoftware.com/, if empty.
 */
@property (nonatomic) NSString* _Nonnull relayUrl;
/**
 * EphemeralMinPort - limit the range of ports that
ICE UDP connections may allocate from.
When specifying the range, make sure it's at least 2x as wide
as the amount of clients that you are hoping to serve concurrently
(see the `Capacity` property).
If EphemeralMinPort or EphemeralMaxPort is left 0, no limit will be applied.
 */
@property (nonatomic) long ephemeralMinPort;
/**
 * EphemeralMaxPort - limit the range of ports that
ICE UDP connections may allocate from.
When specifying the range, make sure it's at least 2x as wide
as the amount of clients that you are hoping to serve concurrently
(see the `Capacity` property).
If EphemeralMinPort or EphemeralMaxPort is left 0, no limit will be applied.
 */
@property (nonatomic) long ephemeralMaxPort;
/**
 * StunServer - STUN URL. Defaults to stun:stun.l.google.com:19302, if empty.
 */
@property (nonatomic) NSString* _Nonnull stunServer;
/**
 * NatProbeUrl - Defaults to https://snowflake-broker.torproject.net:8443/probe, if empty.
 */
@property (nonatomic) NSString* _Nonnull natProbeUrl;
/**
 * NATTypeMeasurementInterval is time before NAT type is retested. Defaults to 0, if empty.
 */
@property (nonatomic) int64_t natTypeMeasurementInterval;
/**
 * PollInterval - In seconds. How often to ask the broker for a new client. Defaults to 5 seconds, if <= 0.
 */
@property (nonatomic) long pollInterval;
/**
 * ClientConnected - A delegate which is called when a client successfully connected.
Will be called on its own thread! You will need to switch to your own UI thread,
if you want to do UI stuff!
 */
@property (nonatomic) id<IPtProxySnowflakeClientConnected> _Nullable clientConnected;
/**
 * IsRunning - Checks to see if a snowflake proxy is running in your app.
 */
- (BOOL)isRunning;
// skipped method SnowflakeProxy.OnNewSnowflakeEvent with unsupported parameter or return types

/**
 * Start - Start the Snowflake proxy.
 */
- (void)start;
/**
 * Stop - Stop the Snowflake proxy.
 */
- (void)stop;
@end

/**
 * LogFileName - the filename of the log residing in `StateDir`.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyLogFileName;
/**
 * MeekLite - Transport implemented in Lyrebird.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyMeekLite;
/**
 * Obfs2 - DEPRECATED transport implemented in Lyrebird.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyObfs2;
/**
 * Obfs3 - DEPRECATED transport implemented in Lyrebird.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyObfs3;
/**
 * Obfs4 - Transport implemented in Lyrebird.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyObfs4;
/**
 * ScrambleSuit - DEPRECATED transport implemented in Lyrebird.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyScrambleSuit;
/**
 * Snowflake - Transport implemented in Snowflake.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxySnowflake;
/**
 * Webtunnel - Transport implemented in Lyrebird.
 */
FOUNDATION_EXPORT NSString* _Nonnull const IPtProxyWebtunnel;

/**
 * LyrebirdVersion - The version of Lyrebird bundled with IPtProxy.
 */
FOUNDATION_EXPORT NSString* _Nonnull IPtProxyLyrebirdVersion(void);

/**
 * NewController - Create a new Controller object.

@param enableLogging Log to StateDir/ipt.log.

@param unsafeLogging Disable the address scrubber.

@param logLevel Log level (ERROR/WARN/INFO/DEBUG). Defaults to ERROR if empty string.

@param transportStopped A delegate, which is called, when the started transport stopped again.
Will be called on its own thread! You will need to switch to your own UI thread,
if you want to do UI stuff!
 */
FOUNDATION_EXPORT IPtProxyController* _Nullable IPtProxyNewController(NSString* _Nullable stateDir, BOOL enableLogging, BOOL unsafeLogging, NSString* _Nullable logLevel, id<IPtProxyOnTransportStopped> _Nullable transportStopped);

/**
 * SnowflakeVersion - The version of Snowflake bundled with IPtProxy.
 */
FOUNDATION_EXPORT NSString* _Nonnull IPtProxySnowflakeVersion(void);

@class IPtProxyOnTransportStopped;

@class IPtProxySnowflakeClientConnected;

/**
 * OnTransportStopped - Interface to get notified when a transport stopped again.
 */
@interface IPtProxyOnTransportStopped : NSObject <goSeqRefInterface, IPtProxyOnTransportStopped> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)stopped:(NSString* _Nullable)name error:(NSError* _Nullable)error;
@end

/**
 * SnowflakeClientConnected - Interface to use when clients connect
to the snowflake proxy. For use with StartSnowflakeProxy
 */
@interface IPtProxySnowflakeClientConnected : NSObject <goSeqRefInterface, IPtProxySnowflakeClientConnected> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Connected - callback method to handle snowflake proxy client connections.
 */
- (void)connected;
@end

#endif
